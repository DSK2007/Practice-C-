#include <iostream>
using namespace std;
// 함수에 대하여
// 함수 라이브러리에 내가 원하는 기능의 함수가 없거나 부족할 때,
// 기존의 함수들을 이용해서 프로그램 내에서 사용자 정의 함수로 구성할 수 있다.
// 함수는 [리턴형 함수명(매개변수)]와 같은 구조로 구성된다.
void test() // 함수는 선언과 정의를 통해 프로그램 내에 알려지며, main과 같은 지역 내에서 호출함으로 사용할 수 있다.
{
	// 리턴형은 그 함수가 돌려줄 수 있는 결과값의 형태이며, 매개 변수는 호출 시 모종의 값을 저장해 함수 안에서 이용할 수 있게 해 결과의 폭을 넓힌다.
	// 리턴형과 매개 변수가 없을 경우 void를 그 자리에 입력해야 한다. 단, 매개 변수 자리에 void는 함수의 정의, 선언, 호출에서든 어디든지 생략이 가능하다.
	cout << "test" << endl; // 가령 test 함수는 리턴값이 없고, 매개 변수도 없지만, 기존의 cout 함수를 이용해 test라는 글을 출력한다.
}
void addres(int x, int y); // 이와 같이 매개 변수가 있는 함수는 인자에 입력된 값에 따라 결과가 달라진다. 리턴값을 제외하고도, 출력되는 것이 달라진다는 점에서 말이다.
int add(int x, int y); // 리턴값이 있는 함수는 함수 그 자체에 결과값이 있으므로, cout에서 리턴값을 참조해 출력하는 등 참조할 수 있다.
int sum(int num); // 재귀 함수는 함수 내에서 자기 자신을 호출하는 재귀 호출을 허용하는 함수이다.
// 기본적으로 함수는 호출할 때 call by value, 값만을 전달하는 것으로 끝난다.
// 여기서 함수를 정의 할 때 적는 함수를 형식 매개 변수, 함수 호출 시 정말로 사용되는 함수(주로 main 함수 내)를 실 매개 변수라고 한다.
int addp(int *pa, int *pb);  // 또한 이와 같이 call by reference, 함수의 주소를 전달하는 것으로 형식 매개 변수가 변하면 실 매개 변수도 변하게 할 수 있다.
int main()
{
	int x = 1, y = 2;
	test();
	addres(1, 2);
	cout << "x=" << x << ", y=" << y << endl;
	cout << sum(-30) << endl;
	cout << add(x, y) << endl; // 함수 x,y는 main과 함수 정의에서 둘 다 존재하나, 실 매개 변수는 함수 호출 시 입력되는 함수이다.
	cout << addp(&x, &y) << endl; // 그러나 addp는 x, y를 더하는 데 두 수에 각각 3을 추가하는데, 이는 실 매개 변수에도 적용된다.
	cout << "x=" << x << ", y=" << y << endl;
	cout << sum(5000) << endl; // 시간이 약간 걸리면서 결과값이 출력되지 못하고 프로그램이 죵료된다.
	// 이를 재귀 호출에 의한 스택 오버플로우라 하며, sum의 값이 INT_MAX의 값인 2147483647을 넘었기 때문에 오버플로우가 된 것이다.
}
// 실행 결과
//test
//3
//x = 1, y = 2
//- 465
//3
//9
//x = 4, y = 5

void addres(int x, int y)
{
	cout << x + y << endl;
}

int add(int x, int y) // 함수 정의 시 사용되는 매개 변수는 main 내에서 호출할 때와 다른 함수로, 값만 이어 받는 개별의 함수다. 이를 형식 매개 변수라고 한다.
{
	return (x + y);
}

int sum(int num) // sum 함수는 재귀 함수로, 0부터 그 숫자까지의 합을 구한다. -3이면 -6, 3이면 6이 나오는 식이다.
{
	if (num < 0) return (num + sum(num + 1)); // 숫자가 0보다 작은 경우, 음수이므로 0이 될 때까지 그 숫자 + sum(숫자+1)을 리턴한다.
	else if (num > 0) return (num + sum(num - 1)); // 숫자가 0보다 큰 경우, 양수이므로 0이 될 때까지 그 숫자 + sum(숫자-1)을 리턴한다.
	else return (num); // 두 경우에 해당되지 않는다면 대부분 재귀 혹은 처음부터 sum(0)이 호출된 경우이다. 숫자 그대로를 리턴한다.
}

int addp(int *pa, int *pb) // addp는 add와 같이 두 수의 합을 출력하지만, 함수 내에서 두 수에 각가 3을 추가한 뒤, 합을 출력한다.
{
	*pa += 3; // 함수의 주소를 참조했으므로, 이는 이 함수 밖의 지역에서도 변화가 유지된다.
	*pb += 3;
	return (*pa + *pb);
}
