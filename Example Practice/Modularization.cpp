#include <iostream>
// 출처 및 참고: 2021학년도 2학기 인덕대학교 한성현 교수님 C++프로그래밍 강좌 4주차
// 모듈화 프로그래밍에 대하여
// 구조적 프로그래밍은 큰 프로그램을 함수라는 여러 개념들로 나누어 구현하는 것이다.
// 모듈화 프로그래밍은 나누어 정복하는 것으로 프로그램을 각각의 기능(모듈)을 함수로 구현하여 합치는 것이다.
// 모듈화 프로그래밍의 장점은 코드의 길이를 줄이거나 만들어질 기능(모듈)에 대해서 더 정확히 정립할 수 있게 하는 것이다.
using std::cout; using std::cin; using std::endl; using std::fixed;
// 우선 기존에 있는 함수 라이브러리를 잘 활용하여 프로그램을 구현해야 한다.
// 그런 뒤 기존 함수들을 응용하여 반복이 필요한 부분을 사용자 정의 함수로 만들어 기능을 구현하는 것이다.
// 주로 프로그램 밖에 출력되는 부분을 모듈화하여 나중에 변경에도 유연하게 작동할 수 있도록 만든다.
void start(void);
int maxmin_num(int id, int a, int b);
// 모듈화 프로그래밍 과정에서 코드의 길이를 최대한 줄이고 싶다면, 사용자 정의 함수의 선언, 정의 부분을
// 새 파일로 만들어, 그 파일을 이 코드에 include문을 통해 포함시키는 것으로 호출 부분만 코드에 표현하면 된다.

int main(void)
{
	int i, num, sum = 0, total;
	int max = INT_MIN, min = INT_MAX;
	start();
	cout << "계산하려는 수는 몇 개입니까=>";
	cin >> total;
	for (i = 1; i <= total; i++)
	{
		cout << i << "번째 수를 입력하세요=";
		cin >> num;
		sum += num;
		max = maxmin_num(1, num, max);
		min = maxmin_num(2, num, min);
	}
	cout << fixed;
	cout.precision(2);
	cout << "합:" << sum << " 평균:" << (double)sum / total << " 최대값:" << max << " 최소값:" << min << endl;
	return 0;
}

void start(void) // start 함수는 cout 함수를 이용한 타이틀을 띄우는 사용자 정의 함수이다.
{
	cout << "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓" << endl;
	cout << "┃ 합, 평균, 최대값, 최소값           ┃" << endl;
	cout << "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛" << endl;
}


int maxmin_num(int id, int a, int b)
{
	// 1이면 최대값, 그 외는 최소값 반환.
	if (id == 1) { return ((a > b) ? a : b); }
	else { return ((a < b) ? a : b); }
}
// 실행 결과 (예시)
//┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
//┃ 합, 평균, 최대값, 최소값           ┃
//┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
//계산하려는 수는 몇 개입니까 = > 3
//1번째 수를 입력하세요 = 3
//2번째 수를 입력하세요 = 4
//3번째 수를 입력하세요 = 7
//합:14 평균 : 4.67 최대값 : 7 최소값 : 3
